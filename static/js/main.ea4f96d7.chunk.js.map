{"version":3,"sources":["bitmap-layer/bitmap-layer.js","bitmap-layer/bitmap-layer-vertex.js","bitmap-layer/bitmap-layer-fragment.js","App.js","serviceWorker.js","index.js"],"names":["DEFAULT_TEXTURE_PARAMETERS","GL","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_LINEAR","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","BandsBitmapLayer","vs","fs","modules","project32","picking","this","getAttributeManager","add","positions","size","type","DOUBLE","fp64","use64bitPositions","update","calculatePositions","noAlloc","setState","numInstances","Float64Array","props","oldProps","changeFlags","extensionsChanged","gl","context","state","model","delete","_getModel","invalidateAll","array1","array2","length","every","value","index","arraysEqual","images","r","Texture2D","data","parameters","g","b","attributeManager","bounds","invalidate","attributes","Number","isFinite","i","Model","Object","assign","getShaders","id","geometry","Geometry","drawMode","TRIANGLE_FAN","vertexCount","texCoords","Float32Array","isInstanced","opts","uniforms","desaturate","transparentColor","tintColor","setUniforms","bitmapTexture_r","bitmapTexture_g","bitmapTexture_b","map","x","slice","draw","img","loadImageArray","Layer","layerName","defaultProps","compare","min","max","viewState","longitude","latitude","zoom","pitch","bearing","vibranceEffect","PostProcessEffect","vibrance","amount","App","r_img","g_img","b_img","r_url","url","replace","g_url","b_url","load","ImageLoader","console","log","layers","TileLayer","minZoom","maxZoom","getTileData","a","urls","Promise","all","renderSubLayers","image_r","image_g","image_b","tile","bbox","west","south","east","north","Array","isArray","then","result","initialViewState","effects","controller","mapStyle","mapOptions","hash","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ea4f96d7.chunk.js","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global HTMLVideoElement */\nimport GL from '@luma.gl/constants';\nimport {Layer, project32, picking} from '@deck.gl/core';\nimport {Model, Geometry, Texture2D} from '@luma.gl/core';\nimport {loadImageArray} from '@loaders.gl/images';\n\nimport vs from './bitmap-layer-vertex';\nimport fs from './bitmap-layer-fragment';\n\nconst DEFAULT_TEXTURE_PARAMETERS = {\n  [GL.TEXTURE_MIN_FILTER]: GL.LINEAR_MIPMAP_LINEAR,\n  [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n};\n\nconst defaultProps = {\n  images: {type: 'array', value: [null], compare: true},\n  bounds: {type: 'array', value: [1, 0, 0, 1], compare: true},\n\n  desaturate: {type: 'number', min: 0, max: 1, value: 0},\n  // More context: because of the blending mode we're using for ground imagery,\n  // alpha is not effective when blending the bitmap layers with the base map.\n  // Instead we need to manually dim/blend rgb values with a background color.\n  transparentColor: {type: 'color', value: [0, 0, 0, 0]},\n  tintColor: {type: 'color', value: [255, 255, 255]}\n};\n\n/*\n * @class\n * @param {object} props\n * @param {number} props.transparentColor - color to interpret transparency to\n * @param {number} props.tintColor - color bias\n */\nexport default class BandsBitmapLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    attributeManager.add({\n      positions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        update: this.calculatePositions,\n        noAlloc: true\n      }\n    });\n\n    this.setState({\n      numInstances: 1,\n      positions: new Float64Array(12)\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    // setup model first\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.getAttributeManager().invalidateAll();\n    }\n\n    // Load images\n    if (!arraysEqual(props.images, oldProps.images)) {\n      // const images = this.loadTextures(props.images);\n      if (props.images) {\n        const {gl} = this.context;\n        this.setState({\n          r: new Texture2D(gl, {\n            data: props.images[0],\n            parameters: DEFAULT_TEXTURE_PARAMETERS\n          }),\n          g: new Texture2D(gl, {\n            data: props.images[1],\n            parameters: DEFAULT_TEXTURE_PARAMETERS\n          }),\n          b: new Texture2D(gl, {\n            data: props.images[2],\n            parameters: DEFAULT_TEXTURE_PARAMETERS\n          }),\n        })\n      }\n    }\n\n    const attributeManager = this.getAttributeManager();\n\n    if (props.bounds !== oldProps.bounds) {\n      attributeManager.invalidate('positions');\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n\n    if (this.state.r) {\n      this.state.r.delete();\n    }\n    if (this.state.g) {\n      this.state.g.delete();\n    }\n    if (this.state.b) {\n      this.state.b.delete();\n    }\n  }\n\n  calculatePositions(attributes) {\n    const {positions} = this.state;\n    const {bounds} = this.props;\n    // bounds as [minX, minY, maxX, maxY]\n    if (Number.isFinite(bounds[0])) {\n      /*\n        (minX0, maxY3) ---- (maxX2, maxY3)\n               |                  |\n               |                  |\n               |                  |\n        (minX0, minY1) ---- (maxX2, minY1)\n     */\n      positions[0] = bounds[0];\n      positions[1] = bounds[1];\n      positions[2] = 0;\n\n      positions[3] = bounds[0];\n      positions[4] = bounds[3];\n      positions[5] = 0;\n\n      positions[6] = bounds[2];\n      positions[7] = bounds[3];\n      positions[8] = 0;\n\n      positions[9] = bounds[2];\n      positions[10] = bounds[1];\n      positions[11] = 0;\n    } else {\n      // [[minX, minY], [minX, maxY], [maxX, maxY], [maxX, minY]]\n      for (let i = 0; i < bounds.length; i++) {\n        positions[i * 3 + 0] = bounds[i][0];\n        positions[i * 3 + 1] = bounds[i][1];\n        positions[i * 3 + 2] = bounds[i][2] || 0;\n      }\n    }\n\n    attributes.value = positions;\n  }\n\n  _getModel(gl) {\n    if (!gl) {\n      return null;\n    }\n\n    /*\n      0,0 --- 1,0\n       |       |\n      0,1 --- 1,1\n    */\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          vertexCount: 4,\n          attributes: {\n            texCoords: new Float32Array([0, 1, 0, 0, 1, 0, 1, 1])\n          }\n        }),\n        isInstanced: false\n      })\n    );\n  }\n\n  draw(opts) {\n    const {uniforms} = opts;\n    const {r, g, b, model} = this.state;\n    const {desaturate, transparentColor, tintColor} = this.props;\n\n    // // TODO fix zFighting\n    // Render the image\n    if (r && g && b && model) {\n      model\n        .setUniforms(\n          Object.assign({}, uniforms, {\n            bitmapTexture_r: r,\n            bitmapTexture_g: g,\n            bitmapTexture_b: b,\n            desaturate,\n            transparentColor: transparentColor.map(x => x / 255),\n            tintColor: tintColor.slice(0, 3).map(x => x / 255)\n          })\n        )\n        .draw();\n    }\n  }\n\n  loadTextures(images) {\n    if (images.every(img => img instanceof Texture2D)) {\n      return images;\n    } else if (images) {\n      // Browser object: Image, ImageData, HTMLCanvasElement, ImageBitmap\n      // Load images\n      return loadImageArray(3, index => images[index])\n    }\n  }\n}\n\nfunction arraysEqual(array1, array2) {\n  if (!array1 || !array2) {\n    return false\n  }\n\n  return array1.length === array2.length && array1.every((value, index) => value === array2[index])\n}\n\nBandsBitmapLayer.layerName = 'BandsBitmapLayer';\nBandsBitmapLayer.defaultProps = defaultProps;","export default `\n#define SHADER_NAME bitmap-layer-vertex-shader\n\nattribute vec2 texCoords;\nattribute vec3 positions;\nattribute vec3 positions64Low;\nattribute vec3 instancePickingColors;\n\nvarying vec2 vTexCoord;\n\nvoid main(void) {\n  geometry.worldPosition = positions;\n  geometry.uv = texCoords;\n  geometry.pickingColor = instancePickingColors;\n\n  gl_Position = project_position_to_clipspace(positions, positions64Low, vec3(0.0), geometry.position);\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n\n  vTexCoord = texCoords;\n\n  vec4 color = vec4(0.0);\n  DECKGL_FILTER_COLOR(color, geometry);\n}\n`;","export default `\n#define SHADER_NAME bitmap-layer-fragment-shader\n\n#ifdef GL_ES\nprecision highp float;\n#endif\n\nuniform sampler2D bitmapTexture_r;\nuniform sampler2D bitmapTexture_g;\nuniform sampler2D bitmapTexture_b;\n\nvarying vec2 vTexCoord;\n\nuniform float desaturate;\nuniform vec4 transparentColor;\nuniform vec3 tintColor;\nuniform float opacity;\n\n// apply desaturation\nvec3 color_desaturate(vec3 color) {\n  float luminance = (color.r + color.g + color.b) * 0.333333333;\n  return mix(color, vec3(luminance), desaturate);\n}\n\n// apply tint\nvec3 color_tint(vec3 color) {\n  return color * tintColor;\n}\n\n// blend with background color\nvec4 apply_opacity(vec3 color, float alpha) {\n  return mix(transparentColor, vec4(color, 1.0), alpha);\n}\n\nvoid main(void) {\n  float r_band = texture2D(bitmapTexture_r, vTexCoord).r;\n  float g_band = texture2D(bitmapTexture_g, vTexCoord).r;\n  float b_band = texture2D(bitmapTexture_b, vTexCoord).r;\n  vec4 image = vec4(r_band, g_band, b_band, 1.);\n\n  gl_FragColor = apply_opacity(color_tint(color_desaturate(image.rgb)), image.a * opacity);\n\n  geometry.uv = vTexCoord;\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n`;","/// app.js\nimport React from \"react\";\nimport DeckGL from \"@deck.gl/react\";\nimport { TileLayer } from \"@deck.gl/geo-layers\";\nimport { StaticMap } from \"react-map-gl\";\n// import {BandsBitmapLayer} from \"deckgl-bands-bitmap-layer\";\nimport BandsBitmapLayer from \"./bitmap-layer/bitmap-layer\";\nimport { ImageLoader } from \"@loaders.gl/images\";\nimport { load } from \"@loaders.gl/core\";\n\nimport { loadImageArray } from \"@loaders.gl/images\";\nimport { vibrance } from \"@luma.gl/shadertools\";\nimport { PostProcessEffect } from \"@deck.gl/core\";\n\n// Viewport settings\nconst viewState = {\n  longitude: -112.1861,\n  latitude: 36.1284,\n  zoom: 12.1,\n  pitch: 0,\n  bearing: 0\n};\n\nconst vibranceEffect = new PostProcessEffect(vibrance, {\n  amount: 1\n});\n\n// DeckGL react component\nexport default class App extends React.Component {\n  state = {\n    r_img: null,\n    g_img: null,\n    b_img: null\n  };\n\n  async componentDidMount() {\n    const url =\n      \"https://landsat-lambda.kylebarron.dev/tiles/229bc0ed88ac7f39effdb554efa0959766e41bb3948754faba13f74f/12/771/1606@2x.png?bands={band}&color_ops=gamma+R+3.5%2C+sigmoidal+R+15+0.35\";\n\n    const r_url = url.replace(\"{band}\", \"4\");\n    const g_url = url.replace(\"{band}\", \"3\");\n    const b_url = url.replace(\"{band}\", \"2\");\n\n    const r_img = await load(r_url, ImageLoader);\n    const g_img = await load(g_url, ImageLoader);\n    const b_img = await load(b_url, ImageLoader);\n\n    this.setState({\n      r_img,\n      g_img,\n      b_img\n    });\n  }\n\n  render() {\n    const { r_img, g_img, b_img } = this.state;\n    console.log([r_img, g_img, b_img]);\n\n    // let layers = [];\n    // if (r_img && g_img && b_img) {\n    //   layers.push(\n    //     new BandsBitmapLayer({\n    //       // https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#Tile_servers\n    //       // data: \"https://c.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n    //       images: [r_img, g_img, b_img],\n    //       bounds: [-112.236328125, 36.10237644873644, -112.1484375, 36.17335693522158]\n    //\n    //     })\n    //\n    //   )\n    // }\n    const layers = [\n      new TileLayer({\n        // https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#Tile_servers\n        // data: \"https://c.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        data:\n          \"https://landsat-lambda.kylebarron.dev/tiles/229bc0ed88ac7f39effdb554efa0959766e41bb3948754faba13f74f/{z}/{x}/{y}@2x.jpg?bands=&color_ops=gamma+R+3.5%2C+sigmoidal+R+15+0.35\",\n\n        minZoom: 0,\n        maxZoom: 12,\n\n        getTileData: async ({ url }) => {\n          const urls = [\n            url.replace(\"bands=\", \"bands=4\"),\n            url.replace(\"bands=\", \"bands=3\"),\n            url.replace(\"bands=\", \"bands=2\")\n          ];\n          const images = await Promise.all([\n            load(urls[0], ImageLoader),\n            load(urls[1], ImageLoader),\n            load(urls[2], ImageLoader)\n          ]);\n          return images;\n        },\n\n        renderSubLayers: props => {\n          const {\n            bbox: { west, south, east, north }\n          } = props.tile;\n          const { data } = props;\n\n          let image_r, image_g, image_b;\n          if (Array.isArray(data)) {\n            image_r = data[0];\n            image_g = data[1];\n            image_b = data[2];\n          } else if (data) {\n            image_r = data.then(result => result && result[0]);\n            image_g = data.then(result => result && result[1]);\n            image_b = data.then(result => result && result[2]);\n          }\n\n          return new BandsBitmapLayer(props, {\n            data: null,\n            images: [image_r, image_g, image_b],\n            bounds: [west, south, east, north]\n          });\n        }\n      })\n      // new BandsBitmapLayer({\n      //   // https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#Tile_servers\n      //   // data: \"https://c.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      //   images: [r_img, g_img, b_img],\n      //   bounds: [-112.236328125, 36.10237644873644, -112.1484375, 36.17335693522158]\n      //\n      // })\n    ];\n\n    return (\n      <DeckGL\n        initialViewState={viewState}\n        layers={layers}\n        effects={[vibranceEffect]}\n        controller\n      >\n        <StaticMap\n          mapStyle=\"https://cdn.jsdelivr.net/gh/nst-guide/osm-liberty-topo@gh-pages/style.json\"\n          mapOptions={{ hash: true }}\n        />\n      </DeckGL>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}